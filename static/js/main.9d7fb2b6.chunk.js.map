{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAddMovie","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setMovie","_useState7","_useState8","isError","setIsError","handleSubmit","fetch","concat","then","res","json","catch","Response","Error","getMovie","data","console","log","movieData","Title","Plot","Poster","imdbID","finally","_Fragment","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","target","trimStart","disabled","onClick","App","setMovies","prevMovies","some","m","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d7fb2b6.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsError(false);\n    setQuery(event.target.value.trimStart());\n  };\n\n  const handleSubmit = () => {\n    setLoading(true);\n    getMovie(query)\n      .then((data) => {\n        if ('Response' in data && data.Response === 'False') {\n          // eslint-disable-next-line no-console\n          console.log(data.Error);\n          setMovie(null);\n          setIsError(true);\n        } else {\n          const movieData = data as MovieData;\n\n          setIsError(false);\n          setMovie({\n            title: movieData.Title,\n            description: movieData.Plot,\n            imgUrl: movieData.Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : movieData.Poster,\n            imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n            imdbId: movieData.imdbID,\n          });\n        }\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const handleQuerySubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleSubmit();\n  };\n\n  const handleAddingMovieClick = () => {\n    if (movie) {\n      onAddMovie(movie);\n      setQuery('');\n      setMovie(null);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleQuerySubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': isError,\n              })}\n              value={query}\n              onChange={handleQueryChange}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': loading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {!isError && !!movie && !loading && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddingMovieClick}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {!isError && !!movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=eeb17cf6';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAddMovie = (movie: Movie) => {\n    setMovies(prevMovies => {\n      if (prevMovies.some(m => m.imdbId === movie.imdbId)) {\n        return prevMovies;\n      }\n\n      return [...prevMovies, movie];\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}